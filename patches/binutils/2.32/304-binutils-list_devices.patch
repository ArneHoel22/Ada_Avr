--- binutils/size.c.orig	2019-03-10 12:30:39.631927345 +0100
+++ binutils/size.c	2019-03-10 12:33:18.456048820 +0100
@@ -339,6 +339,7 @@
   fprintf (stream, _(" The options are:\n\
   -A|-B|-C  --format={sysv|berkeley|avr}  Select output style (default is %s)\n\
             --mcu=<avrmcu>            MCU name for AVR format only\n\
+            --mlist-devices           List all supported MCUs\n\
   -o|-d|-x  --radix={8|10|16}         Display numbers in octal, decimal or hex\n\
   -t        --totals                  Display the total sizes (Berkeley only)\n\
             --common                  Display total size for *COM* syms\n\
@@ -359,6 +360,7 @@
 #define OPTION_RADIX (OPTION_FORMAT + 1)
 #define OPTION_TARGET (OPTION_RADIX + 1)
 #define OPTION_MCU (OPTION_TARGET + 1) 
+#define OPTION_MLIST_DEVICES (OPTION_MCU + 1)
 
 static struct option long_options[] =
 {
@@ -367,12 +369,37 @@
   {"radix", required_argument, 0, OPTION_RADIX},
   {"target", required_argument, 0, OPTION_TARGET},
   {"mcu", required_argument, 0, 203},
+  {"mlist-devices", no_argument, 0, OPTION_MLIST_DEVICES},
   {"totals", no_argument, &show_totals, 1},
   {"version", no_argument, &show_version, 1},
   {"help", no_argument, &show_help, 1},
   {0, no_argument, 0, 0}
 };
 
+static void list_supported_devices (FILE *stream, int status)
+{
+  unsigned int i ;
+  int llen = 0;
+  fprintf (stream, _("List of supported devices:\n"));
+  for (i = 0; i < sizeof(avr) / sizeof(avr[0]); i++)
+  {
+    int slen = strlen(avr[i].name);
+    llen += slen + 1 ;
+    if (llen < 75)
+    {
+      fprintf (stream, _(" %s"), avr[i].name);
+    }
+    else
+    {
+      fprintf (stream, _("\n %s"), avr[i].name);
+      llen = slen + 2 ;
+    }
+  }
+  fprintf (stream, "\n");
+
+  exit (status);
+}
+
 int main (int, char **);
 
 int
@@ -429,6 +456,10 @@
 	avrmcu = optarg;
 	break;
 
+      case OPTION_MLIST_DEVICES:
+	list_supported_devices (stdout, 1);
+	break;
+
       case OPTION_TARGET:
 	target = optarg;
 	break;
--- gas/config/tc-avr.c.orig	2019-01-19 17:01:33.000000000 +0100
+++ gas/config/tc-avr.c	2019-03-10 12:38:37.172297239 +0100
@@ -559,7 +559,8 @@
 #define OPTION_MMCU 'm'
 enum options
 {
-  OPTION_ALL_OPCODES = OPTION_MD_BASE + 1,
+  OPTION_MLIST_DEVICES = OPTION_MD_BASE + 1,
+  OPTION_ALL_OPCODES,
   OPTION_NO_SKIP_BUG,
   OPTION_NO_WRAP,
   OPTION_ISA_RMW,
@@ -571,6 +572,7 @@
 struct option md_longopts[] =
 {
   { "mmcu",   required_argument, NULL, OPTION_MMCU        },
+  { "mlist-devices", no_argument, NULL, OPTION_MLIST_DEVICES },
   { "mall-opcodes", no_argument, NULL, OPTION_ALL_OPCODES },
   { "mno-skip-bug", no_argument, NULL, OPTION_NO_SKIP_BUG },
   { "mno-wrap",     no_argument, NULL, OPTION_NO_WRAP     },
@@ -678,7 +680,8 @@
 	"                   avrxmega7 - XMEGA, > 128K, <= 256K FLASH, > 64K RAM\n"
 	"                   avrtiny   - AVR Tiny core with 16 gp registers\n"));
   fprintf (stream,
-      _("  -mall-opcodes    accept all AVR opcodes, even if not supported by MCU\n"
+      _("  -mlist-devices   list all supported devices\n"
+	"  -mall-opcodes    accept all AVR opcodes, even if not supported by MCU\n"
 	"  -mno-skip-bug    disable warnings for skipping two-word instructions\n"
 	"                   (default for avr4, avr5)\n"
 	"  -mno-wrap        reject rjmp/rcall instructions with 8K wrap-around\n"
@@ -735,6 +738,9 @@
 		    avr_mcu->name, mcu_types[i].name);
 	return 1;
       }
+    case OPTION_MLIST_DEVICES:
+      show_mcu_list(stdout);
+      exit (EXIT_SUCCESS);
     case OPTION_ALL_OPCODES:
       avr_opt.all_opcodes = 1;
       return 1;
